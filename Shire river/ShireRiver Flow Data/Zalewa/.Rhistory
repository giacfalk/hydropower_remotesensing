Zalewa$year<-1
Zalewa[1:61,]$year<-1987
Zalewa[62:427,]$year<-1988
Zalewa[428:792,]$year<-1989
Zalewa[792:1157,]$year<-1990
Zalewa[1158:1522,]$year<-1991
Zalewa[1523:1888,]$year<-1992
Zalewa[1889:2253,]$year<-1993
Zalewa[2254:2618,]$year<-1994
Zalewa[2619:2983,]$year<-1995
Zalewa[2984:3349,]$year<-1996
Zalewa[3350:3714,]$year<-1997
Zalewa[3715:4018,]$year<-1998
Zalewa$month<-match(Zalewa$month,month.abb)
Zalewa$date<-as.Date(paste(Zalewa$day, Zalewa$month, Zalewa$year, sep = "\\"),format='%d\\%m\\%Y')
##2017-18 data at Liwonde
daily_fucntion <- function(X){
data.table::fread(X, skip = 4)
}
daily<-daily_fucntion("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\Shire river\\ShireRiver Flow Data\\Liwonde.txt")
Liwonde_201718<-data.frame(substr(daily$V1, 1, 10), daily$V2)
colnames(Liwonde_201718)<-c("date", "discharge")
Liwonde_201718$date<-as.Date(Liwonde_201718$date,format='%d.%m.%Y')
#Merge
setwd("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\Shire river\\ShireRiver Flow Data")
write.csv(Liwonde_201718, "Liwonde_201718.csv")
write.csv(Zalewa, "Zalewa.csv")
write.csv(shire_2017_long_2, "shire_2017_long_2.csv")
write.csv(shire_1970_long, "shire_1970_long.csv")
discharge_shire<-read.csv("shire_1970_long.csv")
discharge_shire$date<-as.Date(discharge_shire$date,format='%Y-%m-%d')
dis<-discharge_shire[discharge_shire$date > as.Date("1970-01-01"),]
setwd("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\Shire river\\ShireRiver Flow Data\\Zalewa")
discharge_shire<-read.csv("discharge_shire.csv")
mmm<-function(X){
max(X, na.rm=TRUE)
}
jj_spread <- dcast(discharge_shire, Date ~ variable, value.var="value", fun.aggregate=mmm)
is.na(jj_spread) <- jj_spread == ("-Inf")
river_discharge_stations <- jj_spread[-1, ]
river_discharge_stations$Date = as.Date(river_discharge_stations$Date, format="%d/%m/%Y")
names(river_discharge_stations)[names(river_discharge_stations) == 'Date'] <- 'date'
river_discharge_stations$year=year(river_discharge_stations$date)
river_discharge_stations$month=month(river_discharge_stations$date)
river_discharge_stations$day=day(river_discharge_stations$date)
#6) import generation at hydropower schemes from EGENCO
setwd("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\EGENCO data")
sheets <- readxl::excel_sheets("EGENCO Daily Generation Data.xlsx")
lst <- lapply(sheets[1:7], function(sheet)
readxl::read_excel("EGENCO Daily Generation Data.xlsx", sheet = sheet, col_types=c("date", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
)
names(lst) <- sheets[1:7]
egencodata = do.call(rbind, lst)
egencodata$Date = as.Date(egencodata$Date, format = "%Y-%m-%d")
egencodata = egencodata[complete.cases(egencodata[ , 2:6]),]
#Total generation variables
egencodata$total=rowSums(egencodata[2:7], na.rm = TRUE)
#Date variables
egencodata$year=year(egencodata$Date)
egencodata$month=month(egencodata$Date)
egencodata$day=day(egencodata$Date)
#6) Import drought database  data(SPEI index)
#6.1. import spei, shapefile, and extract over Shire river basin
#try different scales and see which correlates better with lake level and discharge
setwd("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing")
#12
ncfile03 <- "spei03.nc"
spei03 <- brick(ncfile03)
shire_basin<-readOGR("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\shirebasin\\shirebasin.shp")
spei03_malawi<-raster::extract(spei03, shire_basin, fun=mean, na.rm=TRUE)
spei03_malawi<-melt(spei03_malawi,measure.vars=names(spei03_malawi)[2:length(names(spei03_malawi))], id.vars ="id")
spei03_malawi$date<-substr(spei03_malawi$Var2,2,11)
spei03_malawi$date = as.Date(spei03_malawi$date, format="%Y.%m.%d")
varnames<-c("var1", "var2", "spei03", "date")
setnames(spei03_malawi,names(spei03_malawi),varnames )
spei03_malawi <- spei03_malawi %>% dplyr::select(spei03, date)
#6
ncfile06 <- "spei06.nc"
spei06 <- brick(ncfile06)
spei06_malawi<-raster::extract(spei06, shire_basin, fun=mean, na.rm=TRUE)
spei06_malawi<-melt(spei06_malawi,measure.vars=names(spei06_malawi)[2:length(names(spei06_malawi))], id.vars ="id")
spei06_malawi$date<-substr(spei06_malawi$Var2,2,11)
spei06_malawi$date = as.Date(spei06_malawi$date, format="%Y.%m.%d")
varnames<-c("var1", "var2", "spei06", "date")
setnames(spei06_malawi,names(spei06_malawi),varnames )
spei06_malawi <- spei06_malawi %>% dplyr::select(spei06, date)
#12
ncfile12 <- "spei12.nc"
spei12 <- brick(ncfile12)
spei12_malawi<-raster::extract(spei12, shire_basin, fun=mean, na.rm=TRUE)
spei12_malawi<-melt(spei12_malawi,measure.vars=names(spei12_malawi)[2:length(names(spei12_malawi))], id.vars ="id")
spei12_malawi$date<-substr(spei12_malawi$Var2,2,11)
spei12_malawi$date = as.Date(spei12_malawi$date, format="%Y.%m.%d")
varnames<-c("var1", "var2", "spei12", "date")
setnames(spei12_malawi,names(spei12_malawi),varnames )
spei12_malawi <- spei12_malawi %>% dplyr::select(spei12, date)
#24
ncfile24 <- "spei24.nc"
spei24 <- brick(ncfile24)
spei24_malawi<-raster::extract(spei24, shire_basin, fun=mean, na.rm=TRUE)
spei24_malawi<-melt(spei24_malawi,measure.vars=names(spei24_malawi)[2:length(names(spei24_malawi))], id.vars ="id")
spei24_malawi$date<-substr(spei24_malawi$Var2,2,11)
spei24_malawi$date = as.Date(spei24_malawi$date, format="%Y.%m.%d")
varnames<-c("var1", "var2", "spei24", "date")
setnames(spei24_malawi,names(spei24_malawi),varnames )
spei24_malawi <- spei24_malawi %>% dplyr::select(spei24, date)
#47
ncfile47 <- "spei47.nc"
spei47 <- brick(ncfile47)
spei47_malawi<-raster::extract(spei47, shire_basin, fun=mean, na.rm=TRUE)
spei47_malawi<-melt(spei47_malawi,measure.vars=names(spei47_malawi)[2:length(names(spei47_malawi))], id.vars ="id")
spei47_malawi$date<-substr(spei47_malawi$Var2,2,11)
spei47_malawi$date = as.Date(spei47_malawi$date, format="%Y.%m.%d")
varnames<-c("var1", "var2", "spei47", "date")
setnames(spei47_malawi,names(spei47_malawi),varnames )
spei47_malawi <- spei47_malawi %>% dplyr::select(spei47, date)
#Merge SPEI at all scales
spei_malawi = Reduce(function(x,y) merge(x,y,by="date",all=TRUE) ,list(spei03_malawi, spei06_malawi, spei12_malawi, spei24_malawi, spei47_malawi))
spei_malawi$year=year(spei_malawi$date)
spei_malawi = subset(spei_malawi, spei_malawi$year > 1969)
spei_malawi$date<-as.POSIXct(spei_malawi$date,format="%Y-%m-%d")
#Daily linear interpolation of SPEI monthly values
library(padr)
spei_malawi = pad(spei_malawi)
spei_malawi<- na.interpolation(spei_malawi, option = "linear")
spei_malawi = fortify.zoo(spei_malawi)
spei_malawi$year=year(spei_malawi$date)
spei_malawi$month=month(spei_malawi$date)
spei_malawi$day=day(spei_malawi$date)
#7) Merge all hitherto imported dailydata
daily = Reduce(function(x,y) merge(x,y,by=c("day", "month", "year"),all=TRUE) ,list(temperature, egencodata, spei_malawi, river_discharge_stations, moisture_long, chirps_long, lake_levels))
daily <- subset( daily, select = -c(Index.x, Index.y, date, Date, date.x, date.y ) )
daily = data.table(daily)
#Date variables
daily$date=as.Date(paste0(daily$year, "-", daily$month, "-", daily$day), format="%Y-%m-%d")
daily$month=month(daily$date)
daily$year=year(daily$date)
daily$day=day(daily$date)
#Ordering
daily = daily[order(year, month, day)]
#############
#MODELLING#
############
#8) Create a function to create lags and leads for time-series regression analysis
shift<-function(x,shift_by){
stopifnot(is.numeric(shift_by))
stopifnot(is.numeric(x))
if (length(shift_by)>1)
return(sapply(shift_by,shift, x=x))
out<-NULL
abs_shift_by=abs(shift_by)
if (shift_by > 0 )
out<-c(tail(x,-abs_shift_by),rep(NA,abs_shift_by))
else if (shift_by < 0 )
out<-c(rep(NA,abs_shift_by), head(x,-abs_shift_by))
else
out<-x
out
}
#Create lags and rolling sum/mean variables
daily$lakemalawi_level_previousmonth<-shift(daily$lake_levels, -30)
daily$lasttwodaysprecs<- rollsumr(daily$precipitations_chirps, k = 2, fill = NA)
daily$lastt6monthsprec<- rollsumr(daily$precipitations_chirps, k = 180, fill = NA)
daily$last3monthmois<- rollmeanr(daily$moisture_long, k = 90, fill = NA)
daily$last3monthspei<- rollmeanr(daily$spei47, k = 90, fill = NA)
daily$last3monthtemp<- rollmeanr(daily$temperature, k = 90, fill = NA)
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
shire_2017$Date<-as.Date(shire_2017$Date,format='%Y\\%m\\%d')
shire_2017_long <- melt(shire_2017, id = "Date")
shire_2017_long_2<-shire_2017_long[grep("dis", shire_2017_long$variable), ]
#1970-2015 data
shire_1970 <- read_excel("Shire river\\ShireRiver Flow Data\\Shire at Chikwawa, Liwonde and Matope.xls", col_types = c("date", "numeric", "numeric", "numeric"))
shire_1970$date<-as.Date(shire_1970$date,format='%Y\\%m\\%d')
shire_1970_long <- melt(shire_1970, id = "date")
##i987-1998 data at Zalewa
setwd("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\Shire river\\ShireRiver Flow Data\\Zalewa")
fun<-function(X){
library(readr)
data<-read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
Zalewa<-lapply(list.files(pattern = "\\.txt$"), fun)
names(Zalewa)<-c(list.files(pattern = "\\.txt$"))
Zalewa<-rbindlist(Zalewa, idcol=TRUE)
Zalewa<-na.omit(Zalewa)
Zalewa$year<-1
Zalewa[1:61,]$year<-1987
Zalewa[62:427,]$year<-1988
Zalewa[428:792,]$year<-1989
Zalewa[792:1157,]$year<-1990
Zalewa[1158:1522,]$year<-1991
Zalewa[1523:1888,]$year<-1992
Zalewa[1889:2253,]$year<-1993
Zalewa[2254:2618,]$year<-1994
Zalewa[2619:2983,]$year<-1995
Zalewa[2984:3349,]$year<-1996
Zalewa[3350:3714,]$year<-1997
Zalewa[3715:4018,]$year<-1998
Zalewa$month<-match(Zalewa$month,month.abb)
Zalewa$date<-as.Date(paste(Zalewa$day, Zalewa$month, Zalewa$year, sep = "\\"),format='%d\\%m\\%Y')
##2017-18 data at Liwonde
daily_fucntion <- function(X){
data.table::fread(X, skip = 4)
}
daily<-daily_fucntion("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\Shire river\\ShireRiver Flow Data\\Liwonde.txt")
Liwonde_201718<-data.frame(substr(daily$V1, 1, 10), daily$V2)
colnames(Liwonde_201718)<-c("date", "discharge")
Liwonde_201718$date<-as.Date(Liwonde_201718$date,format='%d.%m.%Y')
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
shire_2017$Date<-as.Date(shire_2017$Date,format='%Y\\%m\\%d')
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
#Set the working directory
setwd("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing")
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
shire_2017$Date<-as.Date(shire_2017$Date,format='%Y\\%m\\%d')
shire_2017_long <- melt(shire_2017, id = "Date")
shire_2017_long_2<-shire_2017_long[grep("dis", shire_2017_long$variable), ]
#1970-2015 data
shire_1970 <- read_excel("Shire river\\ShireRiver Flow Data\\Shire at Chikwawa, Liwonde and Matope.xls", col_types = c("date", "numeric", "numeric", "numeric"))
shire_1970$date<-as.Date(shire_1970$date,format='%Y\\%m\\%d')
shire_1970_long <- melt(shire_1970, id = "date")
##i987-1998 data at Zalewa
fun<-function(X){
library(readr)
data<-read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
##i987-1998 data at Zalewa
setwd("D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing\\Shire river\\ShireRiver Flow Data\\Zalewa")
fun<-function(X){
library(readr)
data<-read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
Zalewa<-lapply(list.files(pattern = "\\.txt$"), fun)
fun<-function(X){
library(readr)
data<-read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
library(readr)
fun<-function(X){
data<-read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
fun<-function(X){
data<-read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
?read_tsv
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
data<-readr::read_tsv()
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
load("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Visiting IIASA/data.RData")
#Define DD, a measure of absolute value of deviation discharge from the long-run mean discharge
daily2$deviation_discharge=abs(daily2$Liwonde_dis_forecasted-(mean(daily2$Liwonde_dis_forecasted, na.rm=TRUE)))
formula<-capfactor ~  log(deviation_discharge)
myglm1<-glm(formula,data=daily2, family = quasibinomial('logit'))
coeftest(myglm1, vcov.=vcovHC(myglm1, type="HC0"))
formula<-capfactor ~   log(deviation_discharge) + factor(month)
myglm2<-glm(formula,data=daily2, family = quasibinomial('logit'))
coeftest(myglm2, vcov.=vcovHC(myglm2, type="HC0"))
formula<-capfactor ~   log(deviation_discharge) + factor(month) + factor(year)
myglm3<-glm(formula,data=daily2, family = quasibinomial('logit'))
coeftest(myglm3, vcov.=vcovHC(myglm3, type="HC0"))
summary(daily2$droughtflood)
tab(daily2$droughtflood)
stats(daily2$droughtflood)
tabulate(daily2$droughtflood)
frequency(daily2$droughtflood)
frequency(unique(daily2$droughtflood))
frequency(daily2$droughtflood)
View(daily2$droughtflood)
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > 0.25*sd(daily2$deviation_discharge, na.rm = TRUE), 1, 0)
summary(daily2$droughtflood)
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > 5*sd(daily2$deviation_discharge, na.rm = TRUE), 1, 0)
summary(daily2$droughtflood)
View(daily2$droughtflood)
summarise(sum=sum(daily2$droughtflood))
summarise(daily2, sum=sum(droughtflood))
summarise(daily2, sum=sum(droughtflood, na.rm = TRUE))
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > 7.5*sd(daily2$deviation_discharge, na.rm = TRUE), 1, 0)
summarise(daily2, sum=sum(droughtflood, na.rm = TRUE))
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > 6*sd(daily2$deviation_discharge, na.rm = TRUE), 1, 0)
summarise(daily2, sum=sum(droughtflood, na.rm = TRUE))
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > 5*sd(daily2$deviation_discharge, na.rm = TRUE), 1, 0)
summarise(daily2, sum=sum(droughtflood, na.rm = TRUE))
#12) Assess the impact of extreme events of hydropower capacity factor
formula<-capfactor ~ factor(droughtflood)
myglm1<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm1, vcov.=vcovHC(myglm1, type="HC0"))
formula<-capfactor ~ factor(droughtflood) + factor(month)
myglm2<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm2, vcov.=vcovHC(myglm2, type="HC0"))
formula<-capfactor ~ factor(droughtflood)+ factor(month) + factor(year)
myglm3<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm3, vcov.=vcovHC(myglm3, type="HC0"))
#12) Assess the impact of extreme events of hydropower capacity factor
formula<-capfactor ~ factor(droughtflood)
myglm1<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm1, vcov.=vcovHC(myglm1, type="HC0"))
daily2 %>% mutate (deviation_discharge = ntile(deviation_discharge, 100))
daily2 %>% mutate (deviation_discharge = ntile(deviation_discharge, 95))
quantile(daily2$deviation_discharge, 0.95)
quantile(daily2$deviation_discharge, 0.95, na.rm=TRUE)
quantile(daily2$deviation_discharge, 0.95, na.rm=TRUE)
q = quantile(daily2$deviation_discharge, 0.95, na.rm=TRUE)
q
value(q)
get(q)
unname(quantile(daily2$deviation_discharge, 0.95, na.rm=TRUE))
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > unname(quantile(daily2$deviation_discharge, 0.95, na.rm=TRUE)), na.rm = TRUE), 1, 0)
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > unname(quantile(daily2$deviation_discharge, 0.95, na.rm=TRUE)), 1, 0)
#12) Assess the impact of extreme events of hydropower capacity factor
formula<-capfactor ~ factor(droughtflood)
myglm1<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm1, vcov.=vcovHC(myglm1, type="HC0"))
formula<-capfactor ~ factor(droughtflood) + factor(month)
myglm2<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm2, vcov.=vcovHC(myglm2, type="HC0"))
formula<-capfactor ~ factor(droughtflood)+ factor(month) + factor(year)
myglm3<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm3, vcov.=vcovHC(myglm3, type="HC0"))
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > unname(quantile(daily2$deviation_discharge, 0.9, na.rm=TRUE)), 1, 0)
#12) Assess the impact of extreme events of hydropower capacity factor
formula<-capfactor ~ factor(droughtflood)
myglm1<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm1, vcov.=vcovHC(myglm1, type="HC0"))
formula<-capfactor ~ factor(droughtflood) + factor(month)
myglm2<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm2, vcov.=vcovHC(myglm2, type="HC0"))
formula<-capfactor ~ factor(droughtflood)+ factor(month) + factor(year)
myglm3<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm3, vcov.=vcovHC(myglm3, type="HC0"))
#12) Assess the impact of extreme events of hydropower capacity factor
formula<-capfactor ~ factor(droughtflood)
myglm1<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm1, vcov.=vcovHC(myglm1, type="HC0"))
formula<-capfactor ~ factor(droughtflood) + factor(month)
myglm2<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm2, vcov.=vcovHC(myglm2, type="HC0"))
formula<-capfactor ~ factor(droughtflood) + factor(month)
myglm2<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm2, vcov.=vcovHC(myglm2, type="HC0"))
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > unname(quantile(daily2$deviation_discharge, 0.75, na.rm=TRUE)), 1, 0)
#12) Assess the impact of extreme events of hydropower capacity factor
formula<-capfactor ~ factor(droughtflood)
myglm1<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm1, vcov.=vcovHC(myglm1, type="HC0"))
formula<-capfactor ~ factor(droughtflood) + factor(month)
myglm2<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm2, vcov.=vcovHC(myglm2, type="HC0"))
formula<-capfactor ~ factor(droughtflood)+ factor(month) + factor(year)
myglm3<-glm(formula, data=daily2, family = quasibinomial('logit'))
coeftest(myglm3, vcov.=vcovHC(myglm3, type="HC0"))
summarise(daily2, sum=sum(droughtflood, na.rm = TRUE))
length(daily$droughtflood)
nrows(daily$droughtflood)
nrow(daily$droughtflood)
summary(daily$droughtflood)
summarise(daily$droughtflood)
View(daily2)
table(daily2$droughtflood)
health = read.csv("D:\Prod_Uses_Agriculture\Healthedu\GeoHealth Data.csv")
health = read.csv("D:\\Prod_Uses_Agriculture\\Healthedu\\GeoHealth Data.csv")
health$Geolocation
stringr::word(health$Geolocation, 2, sep = '(\\s*|\\,')
library(stringr)
stringr::word(health$Geolocation, 2,  sep = ',\\s*|\\.')
stringr::word(health$Geolocation, 2,  sep = '(\\s*|\\,')
healthstrsplit(health$Geolocation, ",\\s*|\\.")[[1]][2]
strsplit(health$Geolocation, ",\\s*|\\.")[[1]][2]
gsub("^[^(]*,\\s*|\\.,*$", "", str1)
gsub("^[^(]*,\\s*|\\.,*$", "", health$Geolocation)
library(qdap)
install.packages("qdap")
genXtract(health$Geolocation, "(", ",")
library(qdap)
health = read.csv("D:\\Prod_Uses_Agriculture\\Healthedu\\GeoHealth Data.csv")
library(qdap)
install.packages("plotrix")
library(qdap)
genXtract
?genXtract
str_extract(x, perl("(?<=_)(.+)(?=\\.)"))
library(stringr)
str_extract(x, perl("(?<=_)(.+)(?=\\.)"))
?perl
library(stringr)
str_extract(x, perl("(?<=()(.+)(?=\\,)"))
health = read.csv("D:\\Prod_Uses_Agriculture\\Healthedu\\GeoHealth Data.csv")
health$Geolocation
strsplit(health$Geolocation, ",\\s*|\\.")
gsub("^[^,]*,\\s*|\\..*$", "", health$geo)
gsub("^[^,]*,\\s*|\\..*$", "", health$Geolocation)
gsub("^[^(]*,\\s*|\\..*$", "", health$Geolocation)
substr(health$Geolocation, 2, 5)
substr(health$Geolocation, 2, 7)
substr(health$Geolocation, 2, 8)
substr(health$Geolocation, 2, 9)
strsplit(str1, "[|]")[[1]][1]
strsplit(health$Geolocation, "[|]")[[1]][1]
strsplit(health$Geolocation, "[,]")[[1]][1]
sub("\\|.*", "", health$Geolocation)
sub("\\,.*", "", health$Geolocation)
substr(sub("\\,.*", "", health$Geolocation), 2)
substr(sub("\\,.*", "", health$Geolocation), 2, Inf)
substr(sub("\\,.*", "", health$Geolocation), 2, 30)
as.numeric(substr(sub("\\,.*", "", health$Geolocation), 2, 30))
as.numeric(substr(sub("\\).*", "", health$Geolocation), 2, 30))
as.numeric(sub("\\).*", "", health$Geolocation))
as.numeric(sub(".*\\)", "", health$Geolocation))
sub('.*,', '', health$Geolocation)
as.numeric(substr(sub("\\,.*", "", sub('.*,', '', health$Geolocation)), 2, 30))
as.numeric(sub("\\,.*", "", sub('.*,', '', health$Geolocation))))
as.numeric(sub("\\,.*", "", sub('.*,', '', health$Geolocation)))
sub('.*,', '', health$Geolocation)
as.numeric(sub("\\,.*", "", health$Geolocation))
as.numeric(substr(sub("\\,.*", "", health$Geolocation), 2, 30))
as.numeric(substr(sub("\\).*", "", sub('.*,', '', health$Geolocation)), 2, 30))
as.numeric((sub("\\).*", "", sub('.*,', '', health$Geolocation)))
as.numeric((sub("\\).*", "", sub('.*,', '', health$Geolocation))))
as.numeric((sub("\\).*", "", sub('.*,', '', health$Geolocation))))
as.numeric(substr(sub("\\,.*", "", health$Geolocation), 2, 30))
health = read.csv("D:\\Prod_Uses_Agriculture\\Healthedu\\GeoHealth Data.csv")
health$Y  = as.numeric(substr(sub("\\,.*", "", health$Geolocation), 2, 30))
health$X = as.numeric((sub("\\).*", "", sub('.*,', '', health$Geolocation))))
health$Y
is.na(health$Y)
health$Type
unique(health$Type)
health$OperationalStatus
library(raster)
library(rgdal)
gdal_polyonizeR
??D:\Prod_Uses_Agriculture\Export\Prod_use2_s\layers\processed
??gdal_polyonizeR
library(sprawl)
install.packages("")
install.packages("sprawl")
devtools::install_github("lbusett/sprawl")
library(tibble)
save.image("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Visiting IIASA/data.RData")
