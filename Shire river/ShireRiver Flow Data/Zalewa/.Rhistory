ggtitle("Zalewa")+
geom_line(data=daily, aes(x=date, y=MatZaw_dis))
tre <- ggplot()+
xlab("Date")+
ylab("Discharge (m3/s)")+
ggtitle("Chikwawa")+
geom_line(data=daily, aes(x=date, y=Chikwawa_dis))
dqs = plot_grid(uno, due, tre)
ggsave(dqs, filename="dqs.png", device="png", scale=0.5, width = 30, height = 15)
#
d2 = subset(daily, daily$month<10)
formula<-"MatZaw_dis ~ Liwonde_dis_forecasted + lasttwodaysprecs +  moisture_long + last3monthspei"
ols1<-lm(formula,data=d2)
summary(ols1, robust=TRUE)
formula<-"MatZaw_dis ~ Liwonde_dis_forecasted + lasttwodaysprecs +  moisture_long + last3monthspei + factor(month)"
ols2<-lm(formula,data=d2)
summary(ols2, robust=TRUE)
stargazer(ols1, ols2, type = "latex", dep.var.labels   = "Discharge at Matope", add.lines = list(c("Month fixed effects", "No", "Yes")))
#Make prediction
d2$MatZaw_dis_forecasted = predict(ols2, newdata=d2)
#Chikwawa
formula<-"Chikwawa_dis ~ Liwonde_dis_forecasted + MatZaw_dis_forecasted + lasttwodaysprecs +  moisture_long + last3monthspei"
ols1<-lm(formula,data=subset(d2, d2$Chikwawa_dis<1000))
summary(ols1, robust=TRUE)
formula<-"Chikwawa_dis ~ Liwonde_dis_forecasted + MatZaw_dis_forecasted + lasttwodaysprecs +  moisture_long + last3monthspei + factor(month)"
ols2<-lm(formula,data=subset(d2, d2$Chikwawa_dis<1000))
summary(ols2, robust=TRUE)
stargazer(ols1, ols2, type = "latex", dep.var.labels   = "Discharge at Chikwawa", add.lines = list(c("Month fixed effects", "No", "Yes")))
#Make prediction
d2$Chikwawa_dis_forecasted = predict(ols2, newdata=d2)
#validate predictions
formula<-"Liwonde_dis ~ Liwonde_dis_forecasted"
ols1<-lm(formula,data=daily)
summary(ols1, robust=TRUE)
formula<-"MatZaw_dis ~ MatZaw_dis_forecasted"
ols2<-lm(formula,data=d2)
summary(ols2, robust=TRUE)
formula<-"Chikwawa_dis ~ Chikwawa_dis_forecasted"
ols3<-lm(formula,data=d2)
summary(ols3, robust=TRUE)
stargazer(ols1, ols2, ols3, type = "latex", dep.var.labels   = "Discharge at the Shire river (m3/s)", add.lines = list(c("Month fixed effects", "Yes", "Yes")))
#Better prediction: validate by means of Nash-Sutcliffe Efficiency and Kling-Gupta Efficiency
#Generate dataframes of simulated and observed
simulated = daily$Liwonde_dis_forecasted
observed = daily$Liwonde_dis
NSE(simulated, observed, na.rm=TRUE, FUN=log, epsilon="other", epsilon.value=1)
KGE(simulated, observed, s=c(1,1,1), na.rm=TRUE, method=c("2009", "2012"), out.type=c("single", "full"))
simulated = d2$MatZaw_dis_forecasted
observed = d2$MatZaw_dis
NSE(simulated, observed, na.rm=TRUE, FUN=log, epsilon="other", epsilon.value=1)
KGE(simulated, observed, s=c(1,1,1), na.rm=TRUE, method=c("2009", "2012"), out.type=c("single", "full"))
simulated = d2$Chikwawa_dis_forecasted
observed = d2$Chikwawa_dis
NSE(simulated, observed, na.rm=TRUE, FUN=log, epsilon="other", epsilon.value=1)
KGE(simulated, observed, s=c(1,1,1), na.rm=TRUE, method=c("2009", "2012"), out.type=c("single", "full"))
#Produce an abline-type validation plot for discharge at Liwonde and Matope
formula <- y ~ x
river_liw = ggplot(daily, aes(y=Liwonde_dis, x=Liwonde_dis_forecasted, colour=month))+
theme_grey()+
geom_point(size=2)+
geom_abline()+
xlab(expression(paste("Predicted (", m^3/s, ")", sep = "")))+
ylab(expression(paste("Measured (", m^3/s, ")", sep = "")))+
#ggtitle('07/2010 - 08/2018, predicting discharge at Liwonde \n with Lake level, SPEI, cumul. precip, and month')+
scale_color_continuous(name="Month")+
scale_y_continuous(limits = c(0, 450))+
scale_x_continuous(limits = c(0, 450))+
stat_poly_eq(aes(label = paste(..rr.label..)),
label.x.npc = "right", label.y.npc = 0.15,
formula = formula, parse = TRUE, size = 6)
#Plot TS of predicted vs. real
river_liw_compared = ggplot()+
theme_grey()+
geom_line(data=subset(daily, daily$year>2011), aes(y=Liwonde_dis, x=date, colour="Actual"))+
geom_line(data=subset(daily, daily$year>2011), aes(y=Liwonde_dis_forecasted, x=date, colour="Predicted"))+
xlab('Year')+
ylab('Discharge at Liwonde \n (Shire River)')+
scale_colour_discrete(name="Legend")
ggsave(plot=river_liw, device = "png", filename = "river_liw_predicted.png", width = 6, height = 4, scale = 1)
ggsave(plot=river_liw_compared, device = "png", filename = "river_liw_compared.png", width = 6, height = 4, scale = 1)
river_mz = ggplot(d2, aes(y=MatZaw_dis, x=MatZaw_dis_forecasted, colour=month))+
theme_grey()+
geom_point(size=2)+
geom_abline()+
xlab(expression(paste("Predicted (", m^3/s, ")", sep = "")))+
ylab(expression(paste("Measured (", m^3/s, ")", sep = "")))+
#ggtitle('07/2010 - 08/2018, predicting discharge at Liwonde \n with Lake level, SPEI, cumul. precip, and month')+
scale_color_continuous(name="Month")+
scale_y_continuous(limits = c(100, 250))+
scale_x_continuous(limits = c(100, 250))+
stat_poly_eq(aes(label = paste(..rr.label..)),
label.x.npc = "right", label.y.npc = 0.15,
formula = formula, parse = TRUE, size = 6)
#Plot TS of predicted vs. real
river_mz_compared = ggplot()+
theme_grey()+
geom_line(data=subset(d2, d2$year>2011), aes(y=MatZaw_dis, x=date, colour="Actual"))+
geom_line(data=subset(d2, d2$year>2011), aes(y=MatZaw_dis_forecasted, x=date, colour="Predicted"))+
xlab('Year')+
ylab('Discharge at Zalewa \n (Shire River)')+
scale_colour_discrete(name="Legend")
ggsave(plot=river_mz, device = "png", filename = "river_mz_predicted.png", width = 6, height = 4, scale = 1)
ggsave(plot=river_mz_compared, device = "png", filename = "river_mz_compared.png", width = 6, height = 4, scale = 1)
river_chi = ggplot(d2, aes(y=Chikwawa_dis, x=Chikwawa_dis_forecasted, colour=month))+
theme_grey()+
geom_point(size=2)+
geom_abline()+
xlab(expression(paste("Predicted (", m^3/s, ")", sep = "")))+
ylab(expression(paste("Measured (", m^3/s, ")", sep = "")))+
#ggtitle('07/2010 - 08/2018, predicting discharge at Liwonde \n with Lake level, SPEI, cumul. precip, and month')+
scale_color_continuous(name="Month")+
scale_y_continuous(limits = c(500, 700))+
scale_x_continuous(limits = c(500, 700))+
stat_poly_eq(aes(label = paste(..rr.label..)),
label.x.npc = "right", label.y.npc = 0.15,
formula = formula, parse = TRUE, size = 6)
#Plot TS of predicted vs. real
river_chi_compared = ggplot()+
theme_grey()+
geom_line(data=subset(d2, d2$year>2011), aes(y=Chikwawa_dis, x=date, colour="Actual"))+
geom_line(data=subset(d2, d2$year>2011), aes(y=Chikwawa_dis_forecasted, x=date, colour="Predicted"))+
xlab('Year')+
ylab('Discharge at Chikwawa \n (Shire River)')+
scale_colour_discrete(name="Legend")
ggsave(plot=river_chi, device = "png", filename = "river_chi_predicted.png", width = 6, height = 4, scale = 1)
ggsave(plot=river_chi_compared, device = "png", filename = "river_chi_compared.png", width = 6, height = 4, scale = 1)
p <- plot_grid(river_liw_compared, river_liw, river_mz_compared, river_mz, river_chi_compared, river_chi, labels=c('A', 'B', 'C', 'D', 'E', 'F'), nrow = 3, ncol = 2)
title <- ggdraw() + draw_label("Discharge at the Shire River", fontface='bold')
river_combined = plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1))
ggsave(plot=river_combined, device = "png", filename = "river_combined.png", width = 26, height = 28, scale = 0.3)
#4) Import monthly capcity in operation at each plant
inoperationcapacity <- read_excel("Other data/inoperationcapacity.xlsx")
daily2=merge(daily, inoperationcapacity, by=c("month", "year"), all=TRUE)
daily2 = daily2[order(year, month, day)]
#Calculate total capacity in operation and the total hydropower capacity factor
daily2$inoperationcapacity=rowSums(select(daily2, oc_Kapichira, `oc_Nkula A`, `oc_Nkula B`, oc_Tedzani))
daily2$capfactor =  ((daily2$total/1000)/(daily2$inoperationcapacity*24))
daily2 = daily2[!(daily2$capfactor>1)]
#Calculate capacity factor at indivdual schemes
daily2$cf_nkula =  (((daily2$`Nkula A`+daily2$`Nkula B`)/1000)/((daily2$`oc_Nkula A`+daily2$`oc_Nkula B`)*24))
daily2$cf_tedzani =  (((daily2$`Tedzani I&II`+daily2$`Tedzani III`)/1000)/((daily2$oc_Tedzani)*24))
daily2$cf_kapichira =  ((daily2$Kapichira/1000)/((daily2$oc_Kapichira)*24))
daily2 = daily2[!(daily2$cf_nkula>1)]
daily2 = daily2[!(daily2$cf_tedzani>1)]
daily2 = daily2[!(daily2$cf_kapichira>1)]
#Define DD, a measure of absolute value of deviation discharge from the long-run mean discharge
daily2$deviation_discharge=abs(daily2$Liwonde_dis_forecasted-(mean(daily2$Liwonde_dis_forecasted, na.rm=TRUE)))
#5) Assess the effect of deviations in the discharge of hydropower capacity factor
#With generalised linear models with logit link to account for the response variable being fractional
daily2$Liwonde_dis_forecasted_rel = daily2$Liwonde_dis_forecasted/median(daily2$Liwonde_dis_forecasted, na.rm=TRUE)
##DD Calculated at Liwonde
##
disc_efficiency = ggplot(data=subset(daily2, daily2$capfactor<0.75))+
geom_point(aes(x=Liwonde_dis_forecasted, y=capfactor, colour=month), size=1.5, alpha=0.5)+
stat_smooth(aes(x=Liwonde_dis_forecasted, y=capfactor), method = "lm", formula = y ~ x + I(x^2), size = 1)+
xlab("Discharge")+
xlab(expression(paste("Discharge at Liwonde (", m^3/s, ")", sep = "")))+
ylab("Daily hydropower capacity factor")+
scale_color_continuous(name="Month")+
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 0.8))
library (betareg)
betaMod1 <- betareg(capfactor ~  deviation_discharge, data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod1 <- betareg(capfactor ~  deviation_discharge, data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod2 <- betareg(capfactor ~  deviation_discharge + as.factor(month), data = daily2) # train model. Tune
summary (betaMod2)
summary(margins(betaMod2))
stargazer(betaMod1, betaMod2, type = "latex", dep.var.labels   = "Total monthly HCF", add.lines = list(c("Month fixed effects", "No", "Yes")))
betaMod1 <- betareg(capfactor ~  log(deviation_discharge), data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod1 <- betareg(capfactor ~  log(deviation_discharge), data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod2 <- betareg(capfactor ~  log(deviation_discharge) + as.factor(month), data = daily2) # train model. Tune
summary (betaMod2)
summary(margins(betaMod2))
stargazer(betaMod1, betaMod2, type = "latex", dep.var.labels   = "Total monthly HCF", add.lines = list(c("Month fixed effects", "No", "Yes")))
daily2$cf_nkula = ifelse(daily2$cf_nkula>1, 1, daily2$cf_nkula)
daily2$cf_nkula = ifelse(daily2$cf_nkula==0, 0.0001, daily2$cf_nkula)
betaMod1 <- betareg(cf_nkula ~  deviation_discharge, data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod2 <- betareg(cf_nkula ~  deviation_discharge + factor(month), data = daily2) # train model. Tune
summary (betaMod2)
summary(margins(betaMod2))
stargazer(betaMod1, betaMod2, type = "latex", dep.var.labels   = "Monthly HCF at Nkula", add.lines = list(c("Month fixed effects", "No", "Yes")))
daily2$cf_kapichira = ifelse(daily2$cf_kapichira>1, 1, daily2$cf_kapichira)
daily2$cf_kapichira = ifelse(daily2$cf_kapichira==0, 0.0001, daily2$cf_kapichira)
betaMod1 <- betareg(cf_kapichira ~  deviation_discharge, data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod2 <- betareg(cf_kapichira ~  deviation_discharge + factor(month), data = daily2) # train model. Tune
summary (betaMod2)
summary(margins(betaMod2))
stargazer(betaMod1, betaMod2, type = "latex", dep.var.labels   = "Monthly HCF at Kapichira", add.lines = list(c("Month fixed effects", "No", "Yes")))
daily2$cf_tedzani = ifelse(daily2$cf_tedzani>1, 1, daily2$cf_tedzani)
daily2$cf_tedzani = ifelse(daily2$cf_kapichira==0, 0.0001, daily2$cf_kapichira)
betaMod1 <- betareg(cf_tedzani ~  deviation_discharge, data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod2 <- betareg(cf_tedzani ~  deviation_discharge + factor(month), data = daily2) # train model. Tune
summary (betaMod2)
summary(margins(betaMod2))
stargazer(betaMod1, betaMod2, type = "latex", dep.var.labels   = "Monthly HCF at Tedzani", add.lines = list(c("Month fixed effects", "No", "Yes")))
#Define a measure for extreme events as droughtflood = 1 if dd > 2*sd(DD), else droughtflood=0
daily2$droughtflood=ifelse(daily2$deviation_discharge > unname(quantile(daily2$deviation_discharge, 0.75, na.rm=TRUE)), 1, 0)
#12) Assess the impact of extreme events of hydropower capacity factor
betaMod1 <- betareg(capfactor ~  droughtflood, data = daily2) # train model. Tune
summary (betaMod1)
summary(margins(betaMod1))
betaMod2 <- betareg(capfactor ~  droughtflood + as.factor(month), data = daily2) # train model. Tune
summary (betaMod2)
summary(margins(betaMod2))
stargazer(betaMod1, betaMod2, type = "latex", dep.var.labels   = "Total monthly hydropower capacity factor", add.lines = list(c("Month fixed effects", "No", "Yes")))
formula<-"MatZaw_dis ~ Liwonde_dis_forecasted + lasttwodaysprecs +  moisture_long + last3monthspei"
ols1<-lm(formula,data=d2)
summary(ols1, robust=TRUE)
formula<-"MatZaw_dis ~ Liwonde_dis_forecasted + lasttwodaysprecs +  moisture_long + last3monthspei + factor(month)"
ols2<-lm(formula,data=d2)
summary(ols2, robust=TRUE)
load("D:/OneDrive - FONDAZIONE ENI ENRICO MATTEI/Current papers/Climate crime EU/data4.RData")
library(reticulate)
#Set the Python directory and the conda environment
use_python("C:\\OSGeo4W64\\apps\\Python37", required = T)
#Load required libraries (or install them, previosuly)
library(raster)
library(margins)
library(sf)
library(eia)
library(cowplot)
library(ggsci)
library(gridExtra)
library(googledrive)
library(RColorBrewer)
library(jtools)
library(tidyverse)
library(foreign)
library(frm)
library(sandwich)
library(lmtest)
library(ggpmisc)
library(estimatr)
library(readr)
library(splitstackshape)
library(lfstat)
library(wbstats)
library(Amelia)
library(padr)
library(zoo)
library(hydroGOF)
library(imputeTS)
library(hddtools)
library(lfstat)
library(ggplot2)
library(plotly)
library(reshape2)
library(data.table)
library(tidyverse)
library(stargazer)
library(lubridate)
library(reshape2)
library(readxl)
library(fields)
library(chron)
library(ncdf4)
library(raster)
library(robustbase)
library(rgdal)
library(raster)
Sys.setlocale("LC_TIME", "English")
setwd('D:\\OneDrive - FONDAZIONE ENI ENRICO MATTE\\Visiting IIASA\\hydropower_remotesensing')
setwd('D:\\OneDrive - FONDAZIONE ENI ENRICO MATTE\\Visiting IIASA\\hydropower_remotesensing')
setwd('D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing')
lakeslist<-c("0317")
corresponding_lakename<-c("Lake Malawi")
seg1<-"https://ipad.fas.usda.gov/lakes/images/lake"
seg2<-".TPJOJ.2.smooth.txt"
series_lakeheights<-paste(seg1, lakeslist, seg2, sep="")
daily_fucntion <- function(X){
data.table::fread(X, skip = 11)
}
import<-lapply(series_lakeheights, daily_fucntion)
names(import)<-corresponding_lakename
lake_levels <- rbindlist(import)
setnames(lake_levels,names(lake_levels),c("yyyymmdd", "hh", "mm", "lakemalawi_level"))
#Remove missing data and restructure dataframe
lake_levels<-lake_levels[!(lake_levels$lakemalawi_level==999.99),]
lake_levels<-data.frame(lake_levels$lakemalawi_level, substr(lake_levels$yyyymmdd, 1, 4), substr(lake_levels$yyyymmdd, 5, 6), substr(lake_levels$yyyymmdd, 7, 8))
setnames(lake_levels,names(lake_levels),c("lakemalawi_level", "year", "month", "day"))
lake_levels$date<-as.Date(paste(lake_levels$year, lake_levels$month, lake_levels$day, sep="-"))
#Interpolate (linearly) 10-day lake level product to daily observations
lake_levels <- dplyr::select(lake_levels, lakemalawi_level, date)
lake_levels$date<-as.POSIXct(lake_levels$date,format="%Y-%m-%d")
lake_levels = pad(lake_levels)
lake_levels <- zoo(lake_levels$lakemalawi_level, lake_levels$date)
lake_levels<- na.interpolation(lake_levels, option = "linear")
lake_levels = fortify.zoo(lake_levels)
#Define data variables
lake_levels$year=year(lake_levels$Index)
lake_levels$month=month(lake_levels$Index)
lake_levels$day=day(lake_levels$Index)
chirps = read.csv("chirps_rainfall_malawi_2000_2010.csv")
#Restructure data and add date variables
chirps = dplyr::select(chirps, matches("X2|name"))
chirps$id=1
chirps_long = merged.stack(chirps, var.stubs = "X", sep = "var.stubs")
varnames<-c("name", "date", "precipitations_chirps")
setnames(chirps_long,names(chirps_long),varnames )
chirps_long <- dplyr::select(chirps_long, precipitations_chirps, date)
chirps_long$date<-as.POSIXct(chirps_long$date,format="%Y%m%d")
chirps_long$year=year(chirps_long$date)
chirps_long$month=month(chirps_long$date)
chirps_long$day=day(chirps_long$date)
chirps = read.csv("chirps_rainfall_malawi_2010_2018.csv")
#Restructure data and add date variables
chirps = dplyr::select(chirps, matches("X2|name"))
chirps$id=1
chirps_long_2 = merged.stack(chirps, var.stubs = "X", sep = "var.stubs")
varnames<-c("name", "date", "precipitations_chirps")
setnames(chirps_long_2,names(chirps_long_2),varnames )
chirps_long_2 <- dplyr::select(chirps_long_2, precipitations_chirps, date)
chirps_long_2$date<-as.POSIXct(chirps_long_2$date,format="%Y%m%d")
chirps_long_2$year=year(chirps_long_2$date)
chirps_long_2$month=month(chirps_long_2$date)
chirps_long_2$day=day(chirps_long_2$date)
chirps_long = rbind(chirps_long, chirps_long_2)
View(chirps_long)
moisture = read.csv("moisture.csv")
#3) Import precipitation anomalies over malawi
source_python("moisture.py")
moisture = read.csv("moisture.csv")
moisture = dplyr::select(moisture, matches("X|NASA"))
moisture_long = merged.stack(moisture, var.stubs = "NASA_USDA_SM", sep = "var.stubs")
varnames<-c("X", "date", "moisture_NASA")
setnames(moisture_long,names(moisture_long),varnames )
moisture_long <- as.data.frame(dplyr::select(moisture_long, moisture_NASA, date))
moisture_long$date = as.Date(substr(moisture_long$date, 1, 8), format="%Y%m%d")
moisture_long = moisture_long %>%
dplyr::mutate(date = as.Date(date)) %>%
complete(date = seq.Date(min(date), max(date), by="day"))
moisture_long <- zoo(moisture_long$moisture_NASA, moisture_long$date)
moisture_long<- na.interpolation(moisture_long, option = "linear")
moisture_long = fortify.zoo(moisture_long)
moisture_long$year=year(moisture_long$Index)
moisture_long$month=month(moisture_long$Index)
moisture_long$day=day(moisture_long$Index)
moisture = read.csv("moisture.csv")
moisture = dplyr::select(moisture, matches("X|NASA"))
#Restructure data, perform linear interpolation, and add date variables
moisture_long = merged.stack(moisture, var.stubs = "NASA_USDA_SM", sep = "var.stubs")
varnames<-c("X", "date", "moisture_NASA")
setnames(moisture_long,names(moisture_long),varnames )
moisture_long <- as.data.frame(dplyr::select(moisture_long, moisture_NASA, date))
moisture_long$date = as.Date(substr(moisture_long$date, 1, 8), format="%Y%m%d")
moisture_long = moisture_long %>%
dplyr::mutate(date = as.Date(date)) %>%
complete(date = seq.Date(min(date), max(date), by="day"))
moisture_long =
dplyr::mutate(moisture_long, date = as.Date(date)) %>%
complete(date = seq.Date(min(date), max(date), by="day"))
moisture_long = dplyr::mutate(moisture_long, date = as.Date(date)) %>% complete(date = seq.Date(min(date), max(date), by="day"))
moisture_long = dplyr::mutate(moisture_long, date = as.Date(date)) %>% complete(moisture_long, date = seq.Date(min(date), max(date), by="day"))
moisture_long = complete(moisture_long, date = seq.Date(min(date), max(date), by="day"))
moisture_long <- zoo(moisture_long$moisture_NASA, moisture_long$date)
moisture_long<- na.interpolation(moisture_long, option = "linear")
moisture_long = fortify.zoo(moisture_long)
moisture_long$year=year(moisture_long$Index)
moisture_long$month=month(moisture_long$Index)
moisture_long$day=day(moisture_long$Index)
temperature = read.csv("average_temperature_shirebasin_2000_2010.csv")
#Restructure data, perform linear interpolation, and add date variables
temperature$id=1
temperature = merged.stack(temperature, var.stubs = "X", sep = "var.stubs")
temperature = select(temperature, X, .time_1)
varnames = c("temp", "date")
setnames(temperature,names(temperature),varnames )
temperature$date<-as.POSIXct(temperature$date,format="%Y_%m_%d")
temperature = temperature[-1,]
temperature <- zoo(temperature$temp, temperature$date)
temperature<- na.interpolation(temperature, option = "linear")
temperature = fortify.zoo(temperature)
temperature$year=year(temperature$Index)
temperature$month=month(temperature$Index)
temperature$day=day(temperature$Index)
temperature_2 = read.csv("average_temperature_shirebasin_2010_2018.csv")
temperature_2$id=1
temperature_2 = merged.stack(temperature_2, var.stubs = "X", sep = "var.stubs")
temperature_2 = select(temperature_2, X, .time_1)
varnames = c("temp", "date")
setnames(temperature_2,names(temperature_2),varnames )
temperature_2$date<-as.POSIXct(temperature_2$date,format="%Y_%m_%d")
temperature_2 = temperature_2[-1,]
temperature_2 <- zoo(temperature_2$temp, temperature_2$date)
temperature_2<- na.interpolation(temperature_2, option = "linear")
temperature_2 = fortify.zoo(temperature_2)
temperature_2$year=year(temperature_2$Index)
temperature_2$month=month(temperature_2$Index)
temperature_2$day=day(temperature_2$Index)
temperature = rbind(temperature, temperature_2)
View(temperature)
View(temperature_2)
View(temperature_2)
View(temperature)
temperature_2 = rename(temperature_2, temperature = temperature_2)
temperature = rbind(temperature, temperature_2)
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
shire_2017$Date<-as.Date(shire_2017$Date,format='%Y\\%m\\%d')
shire_2017_long <- melt(shire_2017, id = "Date")
shire_2017_long_2<-shire_2017_long[grep("dis", shire_2017_long$variable), ]
#1970-2015 data
shire_1970 <- read_excel("Shire river\\ShireRiver Flow Data\\Shire at Chikwawa, Liwonde and Matope.xls", col_types = c("date", "numeric", "numeric", "numeric"))
shire_1970$date<-as.Date(shire_1970$date,format='%Y\\%m\\%d')
shire_1970_long <- melt(shire_1970, id = "date")
##i987-1998 data at Zalewa
wd = getwd()
setwd(paste0(wd, "/Shire river/ShireRiver Flow Data/Zalewa"))
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
Zalewa<-lapply(list.files(pattern = "\\.txt$"), fun)
names(Zalewa)<-c(list.files(pattern = "\\.txt$"))
Zalewa<-rbindlist(Zalewa, idcol=TRUE)
Zalewa<-na.omit(Zalewa)
Zalewa$year<-1
Zalewa[1:61,]$year<-1987
Zalewa[62:427,]$year<-1988
Zalewa[428:792,]$year<-1989
Zalewa[792:1157,]$year<-1990
Zalewa[1158:1522,]$year<-1991
Zalewa[1523:1888,]$year<-1992
Zalewa[1889:2253,]$year<-1993
Zalewa[2254:2618,]$year<-1994
Zalewa[2619:2983,]$year<-1995
Zalewa[2984:3349,]$year<-1996
Zalewa[3350:3714,]$year<-1997
Zalewa[3715:4018,]$year<-1998
Zalewa$month<-match(Zalewa$month,month.abb)
Zalewa$date<-as.Date(paste(Zalewa$day, Zalewa$month, Zalewa$year, sep = "\\"),format='%d\\%m\\%Y')
##2017-18 data at Liwonde
daily_fucntion <- function(X){
data.table::fread(X, skip = 4)
}
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
setwd(paste0(wd, "/Shire river/ShireRiver Flow Data/Zalewa"))
setwd('D:\\OneDrive - FONDAZIONE ENI ENRICO MATTEI\\Visiting IIASA\\hydropower_remotesensing')
#5) Import discharge and water level at 4 gauging stations
#2017 data
shire_2017 <- read_excel("Shire river\\ShireRiver Flow Data\\2017-2018 shire river flow data all stations.xls")
shire_2017$Date<-as.Date(shire_2017$Date,format='%Y\\%m\\%d')
shire_2017_long <- melt(shire_2017, id = "Date")
shire_2017_long_2<-shire_2017_long[grep("dis", shire_2017_long$variable), ]
#1970-2015 data
shire_1970 <- read_excel("Shire river\\ShireRiver Flow Data\\Shire at Chikwawa, Liwonde and Matope.xls", col_types = c("date", "numeric", "numeric", "numeric"))
shire_1970$date<-as.Date(shire_1970$date,format='%Y\\%m\\%d')
shire_1970_long <- melt(shire_1970, id = "date")
##i987-1998 data at Zalewa
wd = getwd()
setwd(paste0(wd, "/Shire river/ShireRiver Flow Data/Zalewa"))
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
Zalewa<-lapply(list.files(pattern = "\\.txt$"), fun)
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
fun<-function(X){
data<-readr::read_tsv(X)
data<-data %>%
dplyr::select(-X2, -X15) %>%
dplyr::rename(day = X1)
data<-data %>%
tidyr::gather(key = month, value = value, -day)
}
