cors = cbind(cors, year=c("2014", "2015", "2016"))
View(cors)
cors = rbind(cors_uno, cors_due, cors_tre)
cors = cbind(year=c("2014", "2015", "2016"), cors)
latex(cors, file="")
library(Hmisc)
latex(cors, file="")
load("C:\\Users\\GIACOMO\\Downloads\\Telegram Desktop\\dataset20181109.Rdata")
dataset_w2 <- dataset_w %>% group_by(NAME, ISO3, YEAR) %>% summarize(NightLights=mean(NightLights,na.rm = T), TFC=mean(TFC,na.rm = T), COMMPUB=mean(COMMPUB,na.rm = T), RESIDENT=mean(RESIDENT,na.rm = T)) %>% ungroup()
dataset_w2 = subset(dataset_w2, dataset_w2$YEAR == 2014)
###
#these are simple correlations for all countries
COMMPUB <- cor(dataset_w2$NightLights, dataset_w2$COMMPUB, use = "complete.obs")
RESIDENT <- cor(dataset_w2$NightLights, dataset_w2$RESIDENT, use = "complete.obs")
#they look very similar, overall. let's try with total final consumption
TFC <- cor(dataset_w2$NightLights, dataset_w2$TFC, use = "complete.obs")
#it's lower. so I suppose TFC is not COMMPUB+RESIDENT, there are other components not caputred. Industrial?
cors_uno = as.data.frame(cbind(RESIDENT, COMMPUB, TFC))
load("C:\\Users\\GIACOMO\\Downloads\\Telegram Desktop\\dataset20181109.Rdata")
dataset_w2 <- dataset_w %>% group_by(NAME, ISO3, YEAR) %>% summarize(NightLights=mean(NightLights,na.rm = T), TFC=mean(TFC,na.rm = T), COMMPUB=mean(COMMPUB,na.rm = T), RESIDENT=mean(RESIDENT,na.rm = T)) %>% ungroup()
#collapse to a mean value
rm(list=ls())
require(plyr)
library(tidyverse)
library(lubridate)
library(sf)
library(wbstats)
library(viridis)
load("C:\\Users\\GIACOMO\\Downloads\\Telegram Desktop\\dataset20181109.Rdata")
dataset_w2 <- dataset_w %>% group_by(NAME, ISO3, YEAR) %>% summarize(NightLights=mean(NightLights,na.rm = T), TFC=mean(TFC,na.rm = T), COMMPUB=mean(COMMPUB,na.rm = T), RESIDENT=mean(RESIDENT,na.rm = T)) %>% ungroup()
COMMPUB <- cor(dataset_w2$NightLights, dataset_w2$COMMPUB, use = "complete.obs")
RESIDENT <- cor(dataset_w2$NightLights, dataset_w2$RESIDENT, use = "complete.obs")
#they look very similar, overall. let's try with total final consumption
TFC <- cor(dataset_w2$NightLights, dataset_w2$TFC, use = "complete.obs")
#it's lower. so I suppose TFC is not COMMPUB+RESIDENT, there are other components not caputred. Industrial?
cors_uno = as.data.frame(cbind(RESIDENT, COMMPUB, TFC))
dataset_w2 <- dataset_w %>% group_by(NAME, ISO3, YEAR) %>% summarize(NightLights=mean(NightLights,na.rm = T), TFC=mean(TFC,na.rm = T), COMMPUB=mean(COMMPUB,na.rm = T), RESIDENT=mean(RESIDENT,na.rm = T)) %>% ungroup()
dataset_w2 = subset(dataset_w2, dataset_w2$YEAR == 2015)
COMMPUB <- cor(dataset_w2$NightLights, dataset_w2$COMMPUB, use = "complete.obs")
RESIDENT <- cor(dataset_w2$NightLights, dataset_w2$RESIDENT, use = "complete.obs")
TFC <- cor(dataset_w2$NightLights, dataset_w2$TFC, use = "complete.obs")
cors_due = as.data.frame(cbind(RESIDENT, COMMPUB, TFC))
dataset_w2 <- dataset_w %>% group_by(NAME, ISO3, YEAR) %>% summarize(NightLights=mean(NightLights,na.rm = T), TFC=mean(TFC,na.rm = T), COMMPUB=mean(COMMPUB,na.rm = T), RESIDENT=mean(RESIDENT,na.rm = T)) %>% ungroup()
dataset_w2 = subset(dataset_w2, dataset_w2$YEAR == 2016)
COMMPUB <- cor(dataset_w2$NightLights, dataset_w2$COMMPUB, use = "complete.obs")
RESIDENT <- cor(dataset_w2$NightLights, dataset_w2$RESIDENT, use = "complete.obs")
TFC <- cor(dataset_w2$NightLights, dataset_w2$TFC, use = "complete.obs")
cors_tre = as.data.frame(cbind(RESIDENT, COMMPUB, TFC))
cors = rbind(cors_uno, cors_due, cors_tre)
cors = cbind(year=c("2014", "2015", "2016"), cors)
library(Hmisc)
latex(cors, file="")
library(rworldmap)
dataset_w3 <- merge(dataset_w2, countryExData,by.x='ISO3',by.y='ISO3V10')
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$RESIDENT, use = "complete.obs"))
}
ddply(dataset_w3, .(EPI_regions), func)
#why in america corr = 1?
vediamo = subset(dataset_w3, EPI_regions == "North America")
unique(vediamo$NAME)
#perchÃ© sono solo due paesi... facciamo le americhe insieme giusto per provare...
dataset_w3_bis = dataset_w3
dataset_w3_bis$EPI_regions[dataset_w3_bis$EPI_regions == "North America"] <- "Latin America and Caribbe"
dataset_w3_bis$EPI_regions[dataset_w3_bis$EPI_regions == "Latin America and Caribbe"] <- "The Americas"
#retry
RESIDENT_regions<-as.data.frame(ddply(dataset_w3_bis, .(EPI_regions), func))
#ok, high correlation anyway but problem solved
#let's just see the count of countries per category
COUNT_regions<-as.data.frame(dataset_w3_bis %>%
group_by(EPI_regions) %>%
tally())
latex(COUNT_regions, file="")
#25 obs is considered a good threshold. however, a little statistics lesson here: since we are dealing with actual
# data of the entire population of countries (and not a sample), we do not care about normality etc...
# the computed numbers are parameters, not statisttics. hence we are just fine!
# see here https://www.quora.com/What-is-the-difference-between-the-population-correlation-coefficient-p-and-the-sample-correlation-coefficient-r
#ok, let's go on after this excursus
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$COMMPUB, use = "complete.obs"))
}
COMMPUB_regions<-as.data.frame(ddply(dataset_w3_bis, .(EPI_regions), func))
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$TFC, use = "complete.obs"))
}
TFC_regions<-as.data.frame(ddply(dataset_w3_bis, .(EPI_regions), func))
merge_regions<-cbind(RESIDENT_regions,COMMPUB_regions$COR,TFC_regions$COR)
latex(merge_regions, file="")
###
#gdp per capita quintiles
dataset_w4 <- within(dataset_w3, quartile <- as.integer(cut(GDP_capita.MRYA, quantile(GDP_capita.MRYA, probs=0:5/5), include.lowest=TRUE)))
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$RESIDENT, use = "complete.obs"))
}
ddply(dataset_w4, .(quartile), func)
#wow, a non-linear relationship!
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$COMMPUB, use = "complete.obs"))
}
ddply(dataset_w4, .(quartile), func)
#keeps exisitng, hmmm suspiciouus, who's in the fourth quartile? NB quartile 1 = poorest, 5 = richest
vediamo = subset(dataset_w4, quartile == 4)
unique(vediamo$NAME)
#commenti? interesting but difficult to explain result! Relationship declines in bin 4 to then go back high in bin 5.
#and finally, tfc
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$TFC, use = "complete.obs"))
}
ddply(dataset_w4, .(quartile), func)
#same holds, but 1st quartile goes down quite a lot, i.e. there is unobserved consumption which is not resident or commpub.
#just for the sake of interest, let's try with 10 deciles instead than 5
dataset_w4_bis <- within(dataset_w3, quartile <- as.integer(cut(GDP_capita.MRYA, quantile(GDP_capita.MRYA, probs=0:10/10), include.lowest=TRUE)))
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$RESIDENT, use = "complete.obs"))
}
RESIDENT_GDP<-as.data.frame(ddply(dataset_w4_bis, .(quartile), func))
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$COMMPUB, use = "complete.obs"))
}
COMMPUB_GDP<-as.data.frame(ddply(dataset_w4_bis, .(quartile), func))
#and finally, tfc
func <- function(xx)
{
data.frame(COR = cor(xx$NightLights, xx$TFC, use = "complete.obs"))
}
TFC_GDP<-as.data.frame(ddply(dataset_w4_bis, .(quartile), func))
cors_GDP = as.data.frame(cbind(RESIDENT_GDP$COR, COMMPUB_GDP, TFC_GDP$COR))
library(Hmisc)
latex(cors_GDP, file="")
# FREAKING HELL! A SYNUSOIDAL RELATIONSHIP! Now, explain this!
formula = "log(TFC) ~ log(NightLights)"
ols1 = lm(formula = formula, data=dataset_w2)
formula = "log(TFC) ~ log(NightLights)+ as.factor(ISO3)"
ols3 = lm(formula = formula, data=dataset_w2)
stargazer(ols1, ols3, type = "latex", omit = c("ISO3"), dep.var.labels   = "Flight delay (in minutes)", add.lines = list(c("Country fixed effects?", "No", "Yes")))
library(stargazer)
stargazer(ols1, ols3, type = "latex", omit = c("ISO3"), dep.var.labels   = "Flight delay (in minutes)", add.lines = list(c("Country fixed effects?", "No", "Yes")))
formula = "log(TFC) ~ log(NightLights)+ as.factor(ISO3)"
ols3 = lm(formula = formula, data=dataset_w2)
summary(ols3)
formula = "log(TFC) ~ log(NightLights)+ as.factor(ISO3)"
formula = "log(TFC) ~ log(NightLights)+ as.factor(ISO3) +  as.factor(YEAR)"
ols3 = lm(formula = formula, data=dataset_w2)
summary(ols3)
formula = "log(TFC) ~ log(NightLights)+ as.factor(ISO3) + as.factor(YEAR)"
ols3 = lm(formula = formula, data=dataset_w2)
summary(ols3)
load("C:\\Users\\GIACOMO\\Downloads\\Telegram Desktop\\dataset20181109.Rdata")
dataset_w2 <- dataset_w %>% group_by(NAME, ISO3, YEAR) %>% summarize(NightLights=mean(NightLights,na.rm = T), TFC=mean(TFC,na.rm = T), COMMPUB=mean(COMMPUB,na.rm = T), RESIDENT=mean(RESIDENT,na.rm = T)) %>% ungroup()
library("dplyr")
library("stringr")
library("xml2")
library("rvest")
library("lubridate")
library("viridis")
library("ggplot2")
library("tidytext")
install.packages("tidytext")
library("tidytext")
library("tidyr")
library("ggalt")
library("widyr")
library("drlib")
library("igraph")
library("ggraph")
install.packages("ggalt", "widyr", "drlib", "igraph", "ggraph")
install.packages(c("ggalt", "widyr", "drlib", "igraph", "ggraph"))
library("ggplot2")
library("tidytext")
library("tidyr")
library("ggalt")
library("widyr")
library("drlib")
library("igraph")
library("ggraph")
load("D:/Dropbox (FEEM)/Visiting IIASA/hydropower_remotesensing/EGENCO data/momentan.RData")
#1) regress lights against generation, and add control variables
formula<-"NTL_cities_malawi ~ total_1"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total_1 ~ NTL_cities_malawi "
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total ~ NTL_cities_malawi + total_1"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total ~ NTL_cities_malawi"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total_1 ~ NTL_cities_malawi"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
View(prova)
#1) regress lights against generation, and add control variables
formula<-"total_1 ~ NTL_cities_malawi"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total_2 ~ NTL_cities_malawi"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
prova$total_2<-shift(prova$total, -2)
#1) regress lights against generation, and add control variables
formula<-"total_2 ~ NTL_cities_malawi"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total_1 ~ NTL_cities_malawi"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total_1 ~ NTL_cities_malawi + as.factor(month)"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
View(prova)
#1) regress lights against generation, and add control variables
formula<-"total_1 ~ NTL_cities_malawi*as.factor(month)"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"total_1 ~ NTL_cities_malawi"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
formula<-"NTL_cities_malawi ~  spei06_3 + spei06_2 + lakemalawi_level_1"
ols2<-lm(formula,data=prova)
summary(ols2, robust=TRUE)
formula<-"NTL_cities_malawi ~ total_1 + inoperationcapacity + spei06_3 + spei06_2 + lakemalawi_level_1"
ols2<-lm(formula,data=prova)
summary(ols2, robust=TRUE)
#1) regress lights against generation, and add control variables
formula<-"NTL_cities_malawi  ~ total_1"
ols1<-lm(formula,data=prova)
summary(ols1, robust=TRUE)
formula<-"NTL_cities_malawi ~ total_1 + inoperationcapacity + spei06_3 + spei06_2"
ols2<-lm(formula,data=prova)
summary(ols2, robust=TRUE)
formula<-"NTL_cities_malawi ~ total_1 + inoperationcapacity + spei06_3 + spei06_2"
ols2<-lm(formula,data=prova)
summary(ols2, robust=TRUE)
formula<-"NTL_cities_malawi ~ total_1 + inoperationcapacity + spei06_3 + spei06_2  + lakemalawi_level_1 + as.factor(year)"
ols3<-lm(formula,data=prova)
summary(ols3, robust=TRUE)
formula<-"NTL_cities_malawi ~ total_1 + inoperationcapacity + spei06_3 + spei06_2  + as.factor(year)"
ols3<-lm(formula,data=prova)
summary(ols3, robust=TRUE)
formula<-"NTL_cities_malawi ~ total_1 + inoperationcapacity + spei06_3 + spei06_2  + lakemalawi_level_1 + as.factor(year)"
ols3<-lm(formula,data=prova)
summary(ols3, robust=TRUE)
formula<-"NTL_cities_malawi ~ total_1*spei06_3 + inoperationcapacity + as.factor(year)"
ols3<-lm(formula,data=prova)
summary(ols3, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_3 + spei06_2 + spei06_1 + spei06"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_3 + spei06_2 + spei06_1 + spei06 + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_3 + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_2 + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_1 + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_3 + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_4 + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  spei06_3 + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#create a drought dummy
prova$drought = ifelse(prova$spei06_3 <= (-2.5), 1, 0)
#predict generation with drought index
formula<-"total ~  as.factor(drought) + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#create a drought dummy
prova$drought = ifelse(prova$spei06_2 <= (-2.5), 1, 0)
#predict generation with drought index
formula<-"total ~  as.factor(drought) + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict generation with drought index
formula<-"total ~  as.factor(drought) + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#create a drought dummy
prova$drought = ifelse(prova$spei06_1 <= (-2.5), 1, 0)
#predict generation with drought index
formula<-"total ~  as.factor(drought) + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#create a drought dummy
prova$drought = ifelse(prova$spei06_2 <= (-2.5), 1, 0)
#predict generation with drought index
formula<-"total ~  as.factor(drought) + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#create a drought dummy
prova$drought = ifelse(prova$spei06_1 <= (-2) & prova$spei06_2 <= (-2) & prova$spei06_3 <= (-2), 1, 0)
summary(prova$drought)
#predict generation with drought index
formula<-"total ~  as.factor(drought) + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
#predict hydropower output with discharge
formula<-"total ~  Matope_dis + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
stargazer(ols, type = "latex", dep.var.labels   = "Total hydropower generation")
library(stargazer)
stargazer(ols, type = "latex", dep.var.labels   = "Total hydropower generation")
#predict generation with drought index
formula<-"total ~  as.factor(drought) + inoperationcapacity"
ols<-lm(formula,data=prova)
summary(ols, robust=TRUE)
stargazer(ols, type = "latex", dep.var.labels   = "Total hydropower generation")
shiny::runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
library(rmapshaper)
install.packages("rmapshaper")
shapefile = st_read("data/gadm36_1.shp")
shapefile = rmapshaper::ms_simplify(input = as(shapefile, 'Spatial')) %>%
st_as_sf()
shapefile = rmapshaper::ms_simplify(shapefile)
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
shapefile
plot(shapefile)
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
shiny::runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
library(rgdal)
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
View(shapefile)
runApp('D:/Dropbox (FEEM)/Current papers/INEQUALITY ASSESSMENT/Electrification_SSA_data/interface')
setwd('validation/')
setwd('validation')
load("D:/Dropbox (FEEM)/Visiting IIASA/hydropower_remotesensing/env.RData")
library(raster)
#
formula<-"log(NTL_total) ~  log(`Nkula B`+1) + log(`Nkula A`+1) + factor(month)"
ols1<-lm(formula,data=merger)
summary(ols1, robust=TRUE)
row_sub = apply(prova[7:34], 1, function(column) all(column !=0 ))
View(merger)
View(merger)
row_sub = apply(merger[5:32], 1, function(column) all(column !=0 ))
row_sub = apply(merger[5:32], 1, function(column) all(column !=0 ))
row_sub = apply(merger[5:32], 1, function(column) all(column !=0 ))
View(merger)
row_sub = apply(merger[5:32], 4, function(column) all(column !=0 ))
fu = function(X){
paste0("`", X, "`", "~", "log(`Nkula B`+1) + log(`Nkula A`+1) + factor(month)")
}
row_sub = apply(merger[5:32], 1, function(column) all(column !=0 ))
prova2 = merger[row_sub,]
row_sub = apply(merger[5:32], 1, function(column) all(column !=0 ))
merger[5:32]
row_sub = apply(merger[5:32], 1, function(column) all(column !=0 ))
row_sub = apply(merger[5:32], 1, function(X) all(X !=0 ))
#More sophisticated: see heterogeneity in impact across provinces
row_sub = apply(merger[5:32], 1, function(column), all(column !=0 ))
#More sophisticated: see heterogeneity in impact across provinces
row_sub = apply(merger[5:32], 1)
#More sophisticated: see heterogeneity in impact across provinces
row_sub = apply(merger[5:32], 1, FUN=function(column) all(column !=0 ))
#More sophisticated: see heterogeneity in impact across provinces
row_sub = apply(merger[5:32], 1, FUN=function(column){ all(column !=0 )})
#More sophisticated: see heterogeneity in impact across provinces
funcol = function(column){
all(column !=0 )}
#More sophisticated: see heterogeneity in impact across provinces
funcol = function(X){
all(X !=0 )
}
#More sophisticated: see heterogeneity in impact across provinces
funcol = function(X){
all(X != 0)
}
detach("package:reticulate", unload=TRUE)
detach("package:reticulate", unload=TRUE)
library(reticulate)
detach("package:reticulate", unload=TRUE)
#More sophisticated: see heterogeneity in impact across provinces
funcol = function(X){
all(X != 0)
}
#More sophisticated: see heterogeneity in impact across provinces
funcol = function(X){
all(X != 0)
}
load("D:/Dropbox (FEEM)/Visiting IIASA/hydropower_remotesensing/env.RData")
install.packages("raster")
install.packages("raster")
install.packages("raster")
remove.packages("raster")
install.packages("raster")
install.packages("raster")
library(raster)
row_sub = apply(merger[5:32], 1, funcol)
prova2 = merger[row_sub,]
fu = function(X){
paste0("`", X, "`", "~", "log(`Nkula B`+1) + log(`Nkula A`+1) + factor(month)")
}
rm(list= ls()[!(ls() %in% c('daily', 'daily_t', 'daily2', 'merger'))])
save.image("D:/Dropbox (FEEM)/Visiting IIASA/hydropower_remotesensing/env.RData")
load("D:/Dropbox (FEEM)/Meat Africa/Data/R Image.RData")
#1) Descriptive statistics and graphs
#1.1. on meat consumption
setwd("C:\\Users\\Falchetta\\Dropbox (FEEM)\\Meat Africa\\Data")
library(wbstats)
wbstats
tot$adjfactor = wb(indicator = "PA.NUS.PPP", startdate = 2005, enddate = 201)
tot$adjfactor = wb(indicator = "PA.NUS.PPP", startdate = 2005, enddate = 2011)
adjfactor = wb(indicator = "PA.NUS.PPP", startdate = 2005, enddate = 2011)
View(v)
View(adjfactor)
View(tot)
adjfactor = adjfactor %>% select(iso3c, date, value)
library(dplyr)
adjfactor = adjfactor %>% select(iso3c, date, value)
adjfactor %>% subset(date == 2011 | date == 2005)
library(hydroGOF)
library(hydroGOF)
library(reticulate)
library(eia)
library(splitstackshape)
library(lfstat)
library(Amelia)
library(padr)
library(zoo)
library(imputeTS)
library(hddtools)
library(lfstat)
library(ggplot2)
library(raster)
library(plotly)
library(reshape2)
library(data.table)
library(plyr)
library(dplyr)
library(readr)
library(wbstats)
library(tidyr)
library(lubridate)
Sys.setlocale("LC_TIME", "English")
library(reshape2)
library(readxl)
library(fields)
library(chron)
library(ncdf4)
library(raster)
library(robustbase)
library(readr)
library(rgdal)
library(ggplot2)
library(reshape2)
library(data.table)
library(readxl)
library(raster)
install.packages("raster")
library(raster)
detach("package:raster", unload=TRUE)
detach("raster", unload=TRUE)
NSE(daily$Liwonde_dis_forecasted, daily$Liwonde_dis, na.rm=TRUE, FUN=log, epsilon=other, epsilon.value=1)
load("D:/Dropbox (FEEM)/Visiting IIASA/hydropower_remotesensing/env.RData")
library(hydroGOF)
NSE(daily$Liwonde_dis_forecasted, daily$Liwonde_dis, na.rm=TRUE, FUN=log, epsilon=other, epsilon.value=1)
NSE(daily$Liwonde_dis_forecasted, daily$Liwonde_dis, na.rm=TRUE, FUN=log, epsilon="other", epsilon.value=1)
KGE(daily$Liwonde_dis_forecasted, daily$Liwonde_dis, s=c(1,1,1), na.rm=TRUE, method=c("2009", "2012"),
out.type=c("single", "full"))
#6) import generation at hydropower schemes from EGENCO
setwd("EGENCO data")
#Set the working directory
setwd("D:\\Dropbox (FEEM)\\Visiting IIASA\\hydropower_remotesensing")
#6) import generation at hydropower schemes from EGENCO
setwd("EGENCO data")
